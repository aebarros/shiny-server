{
    "collab_server" : "",
    "contents" : "###Load Packages###\n##always load plyr before dplyr##\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(shiny)\nlibrary(reshape2)\nlibrary(leaflet)\nlibrary(DT)\nlibrary(shinythemes)\nlibrary(rmarkdown)\nlibrary(webshot)\nlibrary(rsconnect)\n##source the global file with all the necessary data\nsource(\"global.R\")\n##set up \"water\" for the water quality input select for data explorer tab\nwater <- c(\n  \"Salinity(ppt)\" = \"BegSurfSalin\",\n  \"Temperature(°C)\" = \"BegSurfTemp\",\n  \"Conductivity(µS)\" = \"BegSurfCond\",\n  \"DO%\" = \"BegSurfDO.\",\n  \"DO mg/L\" = \"BegSurfDO.mg.L.\")\n##set up \"gear\" for gear type selection\ngear<- c(\n  \"Large Otter Trawl\"=\"LOT\",\n  \"Small Otter Trawl\"=\"SOT\",\n  \"Larval Sled\"=\"SLS\",\n  \"Seine\"=\"SEINE\",\n  \"20mm\"=\"20mm\",\n  \"Mysid\"=\"Mysid\",\n  \"Mid-Water Trawl\"=\"MWT\")\n\n####Shiny####\n##UI building\nui = bootstrapPage(theme = shinytheme(\"sandstone\"),\n                   navbarPage(\"Bay Area Catch Data\",\n                  #1st tab\n                   tabPanel(\"Interactive Map\",\n                            tags$style(type = \"text/css\", \"html, body {width:100%;height:90%}\"),\n                            tags$style(type = \"text/css\", \"#map {height: calc(100vh - 120px) !important;}\"),\n                   leafletOutput(\"map\"),\n                   tags$div(id=\"cite\",\n                            'Data compiled for ', tags$b('Hobbs Lab Longfin Smelt Survey'), ' by Arthur Barros (2017).'\n                   ),\n                   absolutePanel(id = \"controls\", class = \"panel panel-default\", fixed = TRUE,\n                                 draggable = FALSE, top = 60, left = \"auto\", right = 20, bottom = \"auto\",\n                                 width = 200, height = \"auto\",\n                                 h2(\"Catch Explorer\"),\n                                 selectizeInput(\"species\", \"Species\",\n                                                unique(as.character(data.cpue.melt$CommonName))),\n                                 dateRangeInput(\"dates\",\"Date range\", start=\"2015-01-01\", end=\"2015-01-31\"),\n                                 textOutput(\"DateRange\"),\n                                 selectInput(\"region\",\"Region\",\n                                             c(unique(as.character(data.cpue.melt$Bay.Region)),\"All\")),\n                                 selectInput(\"method\",\"Gear Type\",gear),\n                                 #downloadButton('html_link','Download map'),\n                                 submitButton(\"Submit\"))\n                   ),\n                  #2nd tab\n                   tabPanel(\"Data Explorer\",\n                            fluidRow(\n                              column(3,\n                                     selectizeInput(\"species2\", \"Species\",\n                                                    unique(as.character(data.cpue.melt$CommonName))),\n                                     selectInput(\"region2\",\"Region\",\n                                                 c(unique(as.character(data.cpue.melt$Bay.Region)),\"All\")),\n                                     dateRangeInput(\"dates2\", \"Date range\", start=\"2015-01-01\", end=\"2015-01-31\"),\n                                     selectInput(\"method2\",\"Gear Type\",gear),\n                                     textOutput(\"DateRange2\"),\n                                     selectInput(\"water\",\"Water Parameter\",water),\n                                     submitButton(\"Submit\")\n                                     ),\n                              column(9,\n                                     (plotOutput(\"plot2\", height=300)),\n                                     (plotOutput(\"plot3\", height=300))\n                              ))\n                            )\n))\nserver <- function(input, output, session) {\n  ###########Interactive Map##############################################\n  #Reactive expression used to filter out by user selected variables for final data \"filtered()\"\n  #for map generation\n  filtered<-reactive({\n    ifelse(input$region==\"All\",filtered.region<-data.cpue.melt,filtered.region<-data.cpue.melt[data.cpue.melt$Bay.Region==input$region,])\n    filtered.species<- filtered.region[filtered.region$CommonName==input$species,]\n    filtered.gear<-filtered.species[filtered.species$Method==input$method,]\n    filtered.dates<-filtered.gear[filtered.gear$Date>=input$dates[1] & filtered.gear$Date<=input$dates[2],]\n    ##take averages of data in date range\n    filtered.dates=filtered.dates%>%\n      group_by_(\"Bay.Region\",\"Polygon.Station\",\"longitude\",\"latitude\",\"CommonName\")%>%\n      summarise(CPUE=mean(CPUE,na.rm=TRUE), BegSurfSalin=mean(BegSurfSalin,na.rm=TRUE), BegSurfTemp=mean(BegSurfTemp, na.rm=TRUE), \n                BegSurfCond=mean(BegSurfCond, na.rm=TRUE),BegSurfDO.=mean(BegSurfDO.,na.rm=TRUE),\n                BegSurfDO.mg.L.=mean(BegSurfDO.mg.L.,na.rm=TRUE))\n    filtered.date <-  filtered.dates %>% mutate(CPUE = replace(CPUE,CPUE==0,NA))\n  })\n  \n  #produces base map\n  mymap <- reactive({\n    leaflet(filtered()) %>% addProviderTiles(\"Hydda.Base\")%>%\n      fitBounds(~min(longitude)-.005, ~min(latitude)-.005, ~max(longitude)+.005, ~max(latitude)+.005)\n  })\n  #renders map for main panel in ui\n  output$map <- renderLeaflet({\n    mymap()\n  })\n\n  ##Provides date range count\n  output$DateRange <- renderText({\n    paste(\"Your date range is\", \n          difftime(input$dates[2], input$dates[1], units=\"days\"),\n          \"days\")\n  })\n  \n  ##Provides date range count2\n  output$DateRange2 <- renderText({\n    paste(\"Your date range is\", \n          difftime(input$dates2[2], input$dates2[1], units=\"days\"),\n          \"days\")\n  })\n \n  ##this function used to be an observation, switched to function\n  ##in order to allow for downloading in rmarkdown\n   myfun <- function(map){\n     #this \"pal\" produces the desired colors and bins for distinguishing CPUE\n     pal<-colorBin(\n       palette=\"Reds\",\n       domain=filtered()$CPUE,\n       bins=c(0,.1,1,10,100,1000),\n       pretty = TRUE,\n       na.color=\"black\")\n     \n     #next call populates map with markers based on filtered() data\n       addCircleMarkers(map, data = filtered(),lng = ~longitude, lat = ~latitude,radius=~ifelse(is.na(filtered()$CPUE),2,10),\n                        stroke=TRUE, color=\"black\",weight=2, fillOpacity=1,\n                        fillColor=~pal(filtered()$CPUE),\n                        popup = ~paste(\"Catch per Minute Towed:\", filtered()$CPUE, \"<br>\",\n                                       \"Station:\", Polygon.Station,\"<br>\",\n                                       \"Coordinates:\", latitude,\",\",longitude,\"<br>\"))%>%\n       addLegend(\"bottomleft\", pal=pal, values=filtered()$CPUE, title=\"Catch Per Minute of Tow\",\n                 opacity=1)\n   }\n#here is an observation using leafletProxy to take the above function and run it on our map\n#also have to have the \"clear\" calls here, as they won't work in the myfun\n observe({\n   leafletProxy(\"map\")%>%\n     clearControls%>%\n     clearMarkers()%>% myfun()\n })\n\n#next call handles the download of the pdf, starts by making an html rmarkdown document \n output$html_link <- downloadHandler(\n   filename = 'plot.pdf',\n   \n   content = function(file) {\n     src <- normalizePath('mymap.Rmd')\n     \n     # temporarily switch to the temp dir, in case you do not have write\n     # permission to the current working director\n     ##owd <- setwd(tempdir())\n     ##on.exit(setwd(owd)\n     ##############AB:note, had to stop this to allow rmarkdown document to save changes\n     #file.copy(src, 'mymap.Rmd')\n     out <- render('mymap.Rmd',\n                   html_document()\n     )\n     file.rename(out, 'temp.html')\n     #webshot changes the rmarkdown from html to a static pdf\n     webshot(\"temp.html\", file = file, cliprect = \"viewport\", delay=2)\n   }\n )\n ###############Data Explorer##########\n filtered2<-reactive({\n   ifelse(input$region2==\"All\",filtered.region2<-data.cpue.melt,filtered.region2<-data.cpue.melt[data.cpue.melt$Bay.Region==input$region2,])\n   filtered.species2<- filtered.region2[filtered.region2$CommonName==input$species2,]\n   filtered.gear2<-filtered.species2[filtered.species2$Method==input$method,]\n   filtered.dates2<-filtered.species2[filtered.species2$Date>=input$dates2[1] & filtered.species2$Date<=input$dates2[2],]\n   ##take averages data in date range\n })\n output$plot2<-reactivePlot(function(){\n   p<-ggplot(filtered2(),aes(Polygon.Station,CPUE))+\n   geom_boxplot()+\n     theme_minimal()+\n     ggtitle(\"Catch\")+\n     xlab(\"station name\")+\n     ylab(\"log10 CPUE (catch per minute tow)\")+\n     scale_y_log10()+\n     theme(axis.text.x = element_text(angle = 90, hjust = 1))\n   print(p)\n })\n\n output$plot3<-reactivePlot(function(){\n   q<-ggplot(filtered2(),aes_string(x=\"Polygon.Station\", y=input$water))+\n     geom_boxplot()+\n     theme_minimal()+\n     ggtitle(\"Water Quality\")+\n     xlab(\"station name\")+\n     ylab(input$water)+\n     theme(axis.text.x = element_text(angle = 90, hjust = 1))\n   print(q)\n })\n    \n    # MW: Stop shiny app when closing the browser\n    session$onSessionEnded(stopApp)\n}\n\nshinyApp(ui = ui, server = server)",
    "created" : 1488757782562.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3907619368",
    "id" : "82315B",
    "lastKnownWriteTime" : 1488765856,
    "last_content_update" : 1488765856587,
    "path" : "C:/Users/Barros/Desktop/R/shiny-server/OtterTrawlMapApp/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}